#-*- coding:utf-8 -*-# Mobile Basic Action Libraryimport timefrom time import sleepfrom time import localtime, strftimefrom appium import webdriverfrom appium.webdriver.common.appiumby import AppiumByfrom appium.options.ios import XCUITestOptionsfrom selenium.webdriver.remote.command import Commandfrom selenium.webdriver.common.keys import Keys#--------------------------------변수 선언------------------------------#global MBAL_VERSION, logName, logFileName, reportFileNameMBAL_VERSION = "2022127_API_update2"displayedElement = "None"strTime = ""                                                            # 시간 변수 설정longDelay = 5                   # 모바일 기기별 나누는 용도middleDelay = 3shortDelay = 1delayTime = 1#--------------------------------로그 관련------------------------------##--------timeRecord--------# 로그 파일에 현재 PC 시간 입력# logFileName               로그 파일 이름(경로)def timeRecord(logFileName):    logfile = open(logFileName,'a')    strftime("%y-%m-%d %H:%M:%S",localtime())    strTime = strftime("%y-%m-%d %H:%M:%S",localtime())    logfile.write(strTime)    logfile.close()#--------writeLog--------# log 남기기# logFileName               로그 파일 이름(경로)# logText                   로그 입력 내용 ("시간 +  로그 내용" 형태)def writeLog(logFileName,logText):    timeRecord(logFileName)    logfile = open(logFileName,'a')    logfile.write("\t"+logText+"\n")    logfile.close()    print(logText)#--------writeReport--------# 결과 리포트 작성# reportFileName              리포트 파일 이름(경로)# reportText                  리포트 입력 내용def writeReport(reportFileName,reportText):    #timeRecord(strTime,logFileName)    reportfile = open(reportFileName,'a')    reportfile.write(reportText+"\n")    reportfile.close()    print(reportText)# 장치 리스트 디버그 기록# reportFileName              리포트 파일 이름(경로)# reportText                  리포트 입력 내용def writeDeviceList(deviceListPath,deviceName,deviceInfo,deviceId,devicePw):    deviceText = deviceName + "\t" + deviceInfo + "\t" + "({0}/{1})".format(deviceId,devicePw)    deviceListFile = open(deviceListPath,'a')    deviceListFile.write(deviceText+"\n")    deviceListFile.close()#--------calcTic--------# 테스트 시간 측정# reportFileName              리포트 파일 이름(경로)# reportText                  리포트 입력 내용# def calcTic(startTic,testTic):#     global startTic, testTic, endTic#     currentTic = time.time()#     if startTic == 0:#         startTic = currentTic#     else:#         if testTic == 0:#             testTic = currentTic - startTic#         else:#             testTic = currentTic - testTic#     endTic = currentTic - startTic##     return startTic,testTic,endTic#---------------------------------ID 리스트 불러오기------------------------------##--------exportMobileId--------global textFile, elementtextFile = "element.txt"def exportMobileId(textFile, osType, element):    global iosId    idName = ""    iosId = ""    idList = open(textFile, 'r', encoding='UTF-8')    textLines = idList.readlines()    if osType == "ios":        for textLine in textLines:            exportIdArray = textLine.split(',')            if element in exportIdArray[0]:                idName = exportIdArray[0]                iosId = exportIdArray[2]                break            else:                if element in exportIdArray[1]:                    iosId = exportIdArray[2]                    element = exportIdArray[2]                    if iosId == "":                        iosId = element                    else:                        idName = exportIdArray[0]                else:                    iosId = element        idList.close()    else:        pass    print(idName+",iosId: "+iosId)    time.sleep(3)    return iosIddef exportMobileIdByAction(textFile, osType, Action):    global elementId    # idName = ""    idList = open(textFile, 'r', encoding='UTF-8')    textLines = idList.readlines()    for textLine in textLines:        exportIdArray = textLine.split(',')        if Action in exportIdArray[0]:            if osType == "ios":                elementId = exportIdArray[2]                break            else:                elementId = exportIdArray[1]                break    idList.close()    print(Action + ",ID: " + elementId)    time.sleep(3)    return elementId#---------------------------------Device 리스트 불러오기------------------------------##--------exportDeviceInfo--------# global deviceNameText, deviceTypeText, fenNameText, ipAddressText, devicePortText, deviceIpText, devicePwText, pushTypeTextlistFile = "basicDevice.txt"def exportDeviceInfo(listFile,lineNum):    global deviceNameText, deviceTypeText, fenNameText, ipAddressText, devicePortText, deviceIdText, devicePwText, pushTypeText, deviceInfo, deviceLineText    loopInex = 1    textlineNum = lineNum + 1    deviceNameText = "장치 없음"    deviceTypeText = ""    fenNameText = ""    ipAddressText = ""    devicePortText = ""    deviceIdText = ""    devicePwText = ""    pushTypeText = ""    deviceInfo = ""    deviceLineText = ""    deviceListText = open(listFile, 'r', encoding='UTF-8')    listLines = deviceListText.readlines()    for listLine in listLines:        if loopInex != 1:            if "Finish Line" in listLine:                deviceLineText = "Finish Line"                break            if loopInex == textlineNum:                exportListArray = listLine.split(',')                deviceNameText = exportListArray[0]                                                                     # 장치 이름                deviceTypeText = exportListArray[1]                fenNameText = exportListArray[2]                ipAddressText = exportListArray[3]                devicePortText = exportListArray[4]                deviceIdText = exportListArray[5]                devicePwText = exportListArray[6]                pushTypeText = exportListArray[7]                break        else:            pass        loopInex = loopInex + 1    deviceListText.close()    print("{0}번 장치 정보: {1}".format(lineNum,deviceNameText))    if ipAddressText == "":        deviceInfo = fenNameText    else:        deviceInfo = ipAddressText    time.sleep(3)    return deviceNameText, deviceTypeText, fenNameText, ipAddressText, devicePortText, deviceIdText, devicePwText, pushTypeText, deviceInfo, deviceLineText#---------------------------------Mobile 장치 정보 불러오기------------------------------##--------exportMobileInfo--------# mobileInfoFile = "debug\MobileInfo.txt"def exportMobileInfo(mobileInfoFile):    global platformNameInfo, platformVersionInfo, deviceNameInfo, udidInfo, wƒdaBaseUrl    loopIndex = 1    platformNameInfo = ""    platformVersionInfo = ""    deviceNameInfo = ""    udidInfo = ""    wƒdaBaseUrl = ""    mobileInfoText = open(mobileInfoFile, 'r', encoding='UTF-8')    listLines = mobileInfoText.readlines()    for listLine in listLines:        exportListArray = listLine.split(',')        if loopIndex == 1:            platformNameInfo = exportListArray[1]        if loopIndex == 2:            platformVersionInfo = exportListArray[1]        if loopIndex == 3:            deviceNameInfo = exportListArray[1]        if loopIndex == 4:            udidInfo = exportListArray[1]        if loopIndex == 5:            wƒdaBaseUrl = exportListArray[1]        loopIndex = loopIndex + 1    mobileInfoText.close()    print("모바일 장치 정보: {0},{1},{2},{3}".format(platformNameInfo,platformVersionInfo,deviceNameInfo,udidInfo,wƒdaBaseUrl))    return platformNameInfo, platformVersionInfo, deviceNameInfo, udidInfo, wƒdaBaseUrl#---------------------------------테스트 App 정보 불러오기------------------------------##--------exportAppInfo--------# appInfoFile = "debug\AppInfo.txt"def exportAppInfo(appInfoFile):    global appPathInfo, appPackageInfo, appActivityInfo    loopIndex = 1    appPathInfo = ""    appPackageInfo = ""    appActivityInfo = ""    mobileInfoText = open(appInfoFile, 'r', encoding='UTF-8')    listLines = mobileInfoText.readlines()    for listLine in listLines:        exportAppInfoArray = listLine.split(',')        if loopIndex == 1:            appPathInfo = exportAppInfoArray[1]        if loopIndex == 2:            appPackageInfo = exportAppInfoArray[1]        if loopIndex == 3:            appActivityInfo = exportAppInfoArray[1]        loopIndex = loopIndex + 1    mobileInfoText.close()    print("모바일 App 정보: {0},{1},{2}".format(appPathInfo,appPackageInfo,appActivityInfo))    return appPathInfo, appPackageInfo, appActivityInfo#---------------------------------Appium 동작 관련------------------------------##--------mobile_click--------# mobile 터치 동작# driver                                Appium Webdriver# osType                                동작시킬 모바일 장치의 os 타입 설정 android or ios# elementType, element                  사용되는 element 형태 및 element값 (elementType action 추가)# delayTime                             click 후 대기 시간(초)## clickSearchFail                       click  실패 시 1로 반환# sendSearchFail                        send   실패 시 1로 반환def mobile_click(driver,osType,elementType,element,delayTime):    global clickSearchFail    clickSearchFail = 0    try:        if osType == "android":            if elementType == "xpath":                # driver.find_element_by_xpath(element).click()                driver.find_element(by=AppiumBy.XPATH, value=element).click()            elif elementType == "id":                # driver.find_element_by_id(element).click()                driver.find_element(by=AppiumBy.ID, value=element).click()            elif elementType == "action":                exportMobileIdByAction(textFile, osType, element)                # driver.find_element_by_id(elementId).click()                driver.find_element(by=AppiumBy.ID, value=elementId).click()            print("클릭: {}".format(element))        else:            if osType == "ios":                if elementType == "xpath":                    driver.find_element(by=AppiumBy.XPATH, value=element).click()                else:                    if elementType == "id":                        exportMobileId(textFile, osType, element)                   #IOS Accessibility ID를 리스트에서 받아옴                        # driver.find_element_by_accessibility_id(iosId).click()                        driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value=iosId).click()                    elif elementType == "iosId":                        # driver.find_element_by_accessibility_id(element).click()                        driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value=element).click()                    elif elementType == "action":                                   #IOS.Android 통합 ActionID로 ID 받아옴                        exportMobileIdByAction(textFile, osType, element)                        # driver.find_element_by_accessibility_id(elementId).click()                        driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value=elementId).click()            else:                pass        time.sleep(delayTime)    except:        print("%s: 찾을수 없음" % (element))        clickSearchFail = 1    return clickSearchFail#----------mobile_send----------# mobile 키보드 입력 동작# driver                                Appium Webdriver# osType                                동작시킬 모바일 장치의 os 타입 설정 android or ios# inputText                             입력할 텍스트# elementType, element                  사용되는 element 형태 및 element값# delayTime                             click 후 대기 시간(초)def mobile_send(driver,osType,inputText,elementType,element,delayTime):    global sendSearchFail    sendSearchFail = 0    try:        if osType == "android":            if elementType == "xpath":                driver.find_element(by=AppiumBy.XPATH, value=element).send_keys(inputText)            elif elementType == "id":                driver.find_element(by=AppiumBy.ID, value=element).send_keys(inputText)            elif elementType == "action":                exportMobileIdByAction(textFile, osType, element)                driver.find_element(by=AppiumBy.ID, value=elementId).send_keys(inputText)        else:            if osType == "ios":                if elementType == "xpath":                    driver.find_element(by=AppiumBy.XPATH, value=element).send_keys(inputText)                else:                    if elementType == "id":                        exportMobileId(textFile, osType, element)                   #IOS Accessibility ID를 리스트에서 받아옴                        driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value=iosId).send_keys(inputText)                    elif elementType == "action":                        exportMobileIdByAction(textFile, osType, element)                        driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value=elementId).send_keys(inputText)        time.sleep(delayTime)    except:        print("%s: 찾을수 없음" % (element))        sendSearchFail = 1    return sendSearchFail#--------mobile_send_clear--------# text 입력창 전체 내용 삭제 동작# driver                                Appium Webdriver# osType                                동작시킬 모바일 장치의 os 타입 설정 android or ios# inputText                             입력할 텍스트# elementType, element                  사용되는 element 형태 및 element값# delayTime                             click 후 대기 시간(초)def mobile_send_clear(driver,osType,elementType,element,delayTime):    if osType == "android":        if elementType == "xpath":            driver.find_element(by=AppiumBy.XPATH, value=element).clear()        elif elementType == "id":                driver.find_element(by=AppiumBy.ID, value=element).clear()        elif elementType == "action":            exportMobileIdByAction(textFile, osType, element)            driver.find_element(by=AppiumBy.ID, value=elementId).clear()    else:        if osType == "ios":            if elementType == "xpath":                driver.find_element(by=AppiumBy.XPATH, value=element).clear()            else:                if elementType == "id":                    exportMobileId(textFile, osType, element)                   #IOS Accessibility ID를 리스트에서 받아옴                    driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value=iosId).clear()                    time.sleep(1)                    driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value="텍스트 지우기").click()                else:                    time.sleep(1)                    driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value="텍스트 지우기").click()    time.sleep(delayTime)#--------mobile_element_displayed--------# text 입력창 전체 내용 삭제 동작# driver                                Appium Webdriver# osType                                동작시킬 모바일 장치의 os 타입 설정 android or ios# elementType, element                  사용되는 element 형태 및 element값# 반환값# displayedElement                      element가 보여질 경우 "True" 또는 "False" 반환def mobile_element_displayed(driver,osType,elementType,element):    global displayedElement    displayedElement = "False"    # driver.implicitly_wait(5)    try:        if osType == "android":            if elementType == "xpath":                # displayedElement = driver.find_element_by_xpath(element).is_displayed()                displayedElement = driver.find_element(by=AppiumBy.XPATH, value=element).is_displayed()            else:                if elementType == "id":                    # displayedElement =driver.find_element_by_accessibility_id(element).is_displayed()                    displayedElement = driver.find_element(by=AppiumBy.ID, value=element).is_displayed()        else:            if osType == "ios":                if osType == "ios":                    if elementType == "xpath":                        displayedElement = driver.find_element(by=AppiumBy.XPATH, value=element).is_displayed()                    else:                        if elementType == "id":                            exportMobileId(textFile, osType, element)  # IOS Accessibility ID를 리스트에서 받아옴                            displayedElement = driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value=iosId).is_displayed()                exportMobileId(textFile, osType, element)  # IOS Accessibility ID를 리스트에서 받아옴                # displayedElement = driver.find_element_by_accessibility_id(iosId).is_displayed()                displayedElement = driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value=iosId).is_displayed()    except:        displayedElement = "False"    displayedElement = str(displayedElement)    print("{}: display 확인 안됨".format(element))    return displayedElement#--------mobile_scroll_for_element--------# text 입력창 전체 내용 삭제 동작# driver                                Appium Webdriver# osType                                동작시킬 모바일 장치의 os 타입 설정 android or ios# elementType, element                  사용되는 element 형태 및 element값# 반환값# displayedElement                      element가 보여질 경우 "True" 또는 "False" 반환def mobile_scroll_for_element(driver,osType,elementType,element,delayTime):    loopIndex = 0    sizeX = driver.get_window_size()["width"]  # 가로길이 display size측정    sizeY = driver.get_window_size()["height"]  # 세로길이 display size측정    while loopIndex < 10:        driver.swipe(start_x=0.5*sizeX, start_y=0.8*sizeY, end_x=0.5*sizeX, end_y=0.5*sizeY, duration=100)  # Swipe Down        time.sleep(delayTime)        try:            if osType == "android":                if elementType == "xpath":                    driver.find_element(by=AppiumBy.XPATH, value=element)                else:                    if elementType == "id":                        driver.find_element(by=AppiumBy.ID, value=element)            else:                if osType == "ios":                    if elementType == "xpath":                        driver.find_element(by=AppiumBy.XPATH, value=element)                    else:                        if elementType == "id":                            exportMobileId(textFile, osType, element)                            driver.find_element(by=AppiumBy.ACCESSIBILITY_ID, value=iosId)            break        except:            sleep(shortDelay)            loopIndex = loopIndex + 1            continue#---------------------------------테스트 구간------------------------------#def main():    pass    # logFileName = 'test_log3.txt'    # reportFileName  = "result.txt"    # writeLog(logFileName,"write Log 시작")    # writeReport(reportFileName,"결과 보고 확인용")    # print("finish")    # Desired_Cap = {    #     "deviceName": "RND5의 iPhone",  # 실제 장치 이름    #     "platformVersion": "12.4.8",  # 실제 장치 OS 버전    #     "platformName": "ios",  # 실제 장치 플랫폼    #     "app": "/Users/jungtong/Documents/Appium_ipa/IDIS/IDIS.ipa",  # 실제 장치에서 실행할 앱 파일    #     "automationName": "XCUITest",  # 변경 X    #     "udid": "93ca7786b0827f2bb118f26126a02ee4ab12a379",  # 실제 장치 고유 id    #     "xcodeOrgId": "26B93MEUCK",  # 개발자 계정 고유 id    #     "xcodeSigningId": "iPhone Developer",  # 변경 X    #     "wƒdaBaseUrl": "http://192.168.0.5:8100",  # 실제 장치 ip    #     "appPushTimeout": 60000,  # 타임아웃 설정 값    #     "noReset": "true"    # }    # osType= "ios"    # textFile = "element.txt"    # element = "com.idis.android.idismobileplus:id/addFloatingButton"    # #element = "상세정보_뒤로가기"    # exportMobileId(textFile,osType, element)    # listFile = "deviceList.txt"    # exportDeviceInfo(listFile, 7)if __name__ == "__main__":    main()